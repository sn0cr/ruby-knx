#!/usr/bin/env ruby
# Copyright (c) 2014 C.Wahl

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

def relative_to_base(path)
  File.expand_path(File.join(File.dirname(__FILE__), "..", path ))
end


require relative_to_base("vendor/solareventcalculator")
require "yaml"

config = YAML::load(
  File.open(relative_to_base("bin/groupaddresses"))
)["schedule_blinds"]

LATITUDE = config["latitude"]
LONGITUDE = config["longitude"]
SET_COMMAND = config["command"]["set"]
RISE_COMMAND = config["command"]["rise"]
BLIND_COMMAND = config["command"]
TIMEZONE = config["timezone"]

DAY_IN_SECONDS = 3600 * 24
THRESHHOLD = 3600

time_zone = TZInfo::Country.get(TIMEZONE).zone_identifiers.first

date = DateTime.parse Time.now.to_s
calc = SolarEventCalculator.new(date, LATITUDE, LONGITUDE)

rise_time = calc.calc.compute_nautical_sunrise time_zone
set_time = calc.compute_nautical_sunset time_zone


if date > set_time
  date = DateTime.parse (Time.now + DAY_IN_SECONDS).to_s
  calc = SolarEventCalculator.new(date, LATITUDE, LONGITUDE)

  rise_time = calc.compute_nautical_sunrise time_zone
  set_time = calc.compute_nautical_sunset time_zone
end

puts "Suns sets: #{set_time}" if Time.now < set_time.to_time
puts "Suns rise: #{rise_time}" if Time.now < rise_time.to_time

# blinds up
def rise_command(groupaddress)
  "#{relative_to_base('bin/write_bit')} #{groupaddress} 0"
end

def set_command(groupaddress)
  "#{relative_to_base('bin/write_bit')} #{groupaddress} 1"
end

# run that job:
def run_at(time, command)
  sucessful = system "echo '#{command}' | at #{time.strftime("%H")}#{time.strftime("%M")} #{time.strftime("%b").downcase} #{time.strftime("%e")}"
  puts "Command: #{command} #{sucessful ? "was" : "wasn't"} sucessfully enqued."
end

run_at set_time, set_command(SET_COMMAND)
run_at rise_time, rise_command(RISE_COMMAND)
