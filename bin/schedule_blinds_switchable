#!/usr/bin/env ruby
# Copyright (c) 2014 C.Wahl

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
require File.expand_path(File.join(File.dirname(__FILE__), "..", "lib/script_utilities/script_utilities"))

require "redis"

REDIS = Redis.new


include KNX::ScriptUtilities

require_relative_to_base "vendor/solareventcalculator"
require_relative_to_base "lib/knx"
GROUPADDRESSES = read_yaml( relative_to_base( "bin/groupaddresses"))
config = GROUPADDRESSES["schedule_blinds"]

LATITUDE = config["latitude"]
LONGITUDE = config["longitude"]
BLIND_COMMAND = config["command"]
TIMEZONE = config["timezone"]

REDIS_KEY = config["redis_switchable_key"]

DAY_IN_SECONDS = 3600 * 24
THRESHHOLD = 3600
WEEKEND = [0]
WEEKEND_EARLIEST_RISETIME =  9
WEEK_EARLIEST_RISETIME = 7

# Internals
RISE_ARGUMENT = "rise"
SET_ARGUMENT = "set"

SHOULD_RISE_SET = begin
  REDIS.get(REDIS_KEY) == 'true'
rescue Redis::CannotConnectError => e
  true
end



def calculate_times(date)
  calc = SolarEventCalculator.new(date, LATITUDE, LONGITUDE)
  time_zone = TZInfo::Country.get(TIMEZONE).zone_identifiers.first

  rise_time = calc.compute_official_sunrise time_zone
  rise_time = if WEEKEND.include?(rise_time.wday) && (rise_time.hour < WEEKEND_EARLIEST_RISETIME)
    DateTime.new(rise_time.year,rise_time.mon,rise_time.day,WEEKEND_EARLIEST_RISETIME, 0)
  elsif rise_time.hour < WEEK_EARLIEST_RISETIME
    DateTime.new(rise_time.year,rise_time.mon,rise_time.day,WEEK_EARLIEST_RISETIME, 0)
  else
    rise_time
  end
  set_time = calc.compute_official_sunset time_zone
  [rise_time, set_time]
end

# blinds up
def rise_command
  "#{__FILE__} #{RISE_ARGUMENT}"
end

def set_command
  "#{__FILE__} #{SET_ARGUMENT}"
end

# run that job:
def run_at(time, command)
  sucessful = system "echo '#{command}' | at #{time.strftime("%H")}#{time.strftime("%M")} #{time.strftime("%b").downcase} #{time.strftime("%e")}"
  puts "Command: '#{command}' #{sucessful ? "was" : "wasn't"} sucessfully enqued."
end

def schedule_blinds
  current_date = DateTime.parse Time.now.to_s

  (rise_time, set_time) = calculate_times current_date
  if current_date > set_time
    current_date = DateTime.parse (Time.now + DAY_IN_SECONDS).to_s
    (rise_time, set_time) = calculate_times current_date
  end

  if Time.now < set_time.to_time && SHOULD_RISE_SET
    puts "Suns sets: #{set_time}"
    run_at set_time, set_command
  end
  if Time.now < rise_time.to_time && SHOULD_RISE_SET
    puts "Suns rise: #{rise_time}"
    run_at rise_time, rise_command
  end
end

def rise_command_called
  write_to_blinds 0
end

def set_command_called
  write_to_blinds 255
end

def write_to_blinds(value)
  KNX(GROUPADDRESSES["knx_ip"]) do |knx|
    GROUPADDRESSES["blinds"].each do |ga|
      encoded_value = KNX::Encode.byte_int(value)
      value = KNX::Decode.byte_int [0,0] + encoded_value
      print "#{KNX::EncodeUtilities.scale value, from: 0..255, to: 0..100}% (#{value}) "
      puts "#{knx.write_to(ga, encoded_value)? 'was':'wasn\'t'} written to #{ga} successfully."
    end
  end
end

if arg = ARGV[0]
  if arg.strip == RISE_ARGUMENT && SHOULD_RISE_SET
    rise_command_called
  elsif arg.strip == SET_ARGUMENT && SHOULD_RISE_SET
    set_command_called
  end
else
  schedule_blinds
end
